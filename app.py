import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
import io
from PIL import Image

# CSS pour personnaliser l'interface
st.markdown(
    """
    <style>
    .stApp {
        background-image: url('//content/Arri√®re_plan.jpg');  /* Chemin relatif ou absolu */
        background-size: cover;
        background-position: center;
    }
    .main {
        background-color: rgba(255, 255, 255, 0.8);
        padding: 20px;
        border-radius: 10px;
    }
    </style>
    """,
    unsafe_allow_html=True  # Correction de la faute de frappe
)

import pandas as pd
import streamlit as st

# Charger les mod√®les
try:
    
    svm_model = joblib.load('svm_model.pkl')
    lr_model = joblib.load('lr_model.pkl')
    knn_model = joblib.load('knn_model.pkl')
    nn_model = joblib.load('nn_model.pkl')
except FileNotFoundError as e:
    st.error(f"Erreur lors du chargement des mod√®les : {e}")

try:
    rf_model = joblib.load('rf_model.pkl')
    print("Mod√®le charg√© avec succ√®s.")
except FileNotFoundError:
    print("Erreur : le fichier rf_model.pkl n'a pas √©t√© trouv√©.")   

# Charger les donn√©es
try:
    data = pd.read_csv('temp_data.csv')
    st.write("Donn√©es charg√©es avec succ√®s.")
except FileNotFoundError:
    st.error("Le fichier de donn√©es 'temp_data.csv' est introuvable.")


# Donn√©es de test (√† adapter selon vos donn√©es)
X_test = data[['Open', 'High', 'Low', 'Close', '7_day_avg', '30_day_avg']]



# Sommaire interactif
st.sidebar.image("/content/Logo.png", caption="Bitcoin Market", use_container_width=True)


st.sidebar.title("Sommaire")
menu = st.sidebar.radio(
    "Naviguer vers :",
    ["Introduction", "Compr√©hension des donn√©es" , "Pr√©paration des donn√©es", "Visualisation des donn√©es", "Mod√©lisation et √âvaluation"]
)

# Section : Introduction
if menu == "Introduction":
    st.title("üìà Pr√©diction du Signal de Trading Bitcoin")
    st.write(
        """
        Bienvenue dans cette application interactive d√©di√©e √† la pr√©diction des signaux de trading pour le Bitcoin.

        Cette application utilise des donn√©es historiques sur les prix et les volumes √©chang√©s pour pr√©dire si un signal de march√© repr√©sente un **achat** ou une **vente**.

        L'application vous permet d'explorer diff√©rentes √©tapes du processus de pr√©diction :
        - **Compr√©hension des donn√©es** : Explorez les donn√©es utilis√©es dans cette application.
        - **Pr√©paration des donn√©es** : D√©couvrez les √©tapes de nettoyage et de transformation des donn√©es avant l'entra√Ænement des mod√®les.
        - **Visualisation des donn√©es** : Visualisez les tendances des prix et des volumes √©chang√©s au fil du temps.
        - **Mod√©lisation et √âvaluation** : Apprenez comment les mod√®les sont cr√©√©s et √©valu√©s pour pr√©dire les signaux de trading.

        Cliquez sur les autres sections pour en savoir plus sur chaque √©tape du processus.
        """
    )
# Section : Compr√©hension des donn√©es
elif menu == "Compr√©hension des donn√©es":
    st.title("üìä Compr√©hension des donn√©es")
    st.write(
        """
        Cette section fournit une vue d'ensemble des donn√©es utilis√©es dans cette application pour pr√©dire les signaux de trading Bitcoin.

        Les donn√©es comprennent :
        - **Prix d'ouverture** : Le prix auquel le Bitcoin a √©t√© √©chang√© lors de l'ouverture de la p√©riode.
        - **Prix de cl√¥ture** : Le prix auquel le Bitcoin a √©t√© √©chang√© √† la fin de la p√©riode.
        - **Volume √©chang√©** : Le nombre total de Bitcoins √©chang√©s pendant cette p√©riode.

        Ces informations sont utilis√©es pour pr√©dire si un signal de march√© correspond √† un **achat** ou √† une **vente**.
        """
    )

    # Charger les donn√©es depuis le fichier temporaire
    data = pd.read_csv('temp_data.csv')

    # Affichage des premi√®res lignes du jeu de donn√©es
    st.subheader("Aper√ßu des donn√©es")
    st.write("Voici un aper√ßu des premi√®res lignes du jeu de donn√©es :")
    st.dataframe(data.head())

    # Dimensions et informations des donn√©es
    st.subheader("Dimensions et informations")
    st.write(f"Le jeu de donn√©es contient **{data.shape[0]} lignes** et **{data.shape[1]} colonnes**.")
    buffer = io.StringIO()
    data.info(buf=buffer)
    s = buffer.getvalue()
    st.text(s)

    # Statistiques descriptives
    st.subheader("Statistiques descriptives")
    st.write("R√©sum√© statistique des colonnes num√©riques :")
    st.dataframe(data.describe())

    # R√©partition des classes
    st.subheader("R√©partition des classes")
    st.write("R√©partition des signaux d'achat (1) et de vente (0) :")
    class_distribution = data['Signal'].value_counts()
    st.bar_chart(class_distribution)

    # Visualisation des colonnes importantes
    st.subheader("Visualisation des donn√©es")
    st.write("√âvolution des prix de cl√¥ture au fil du temps :")
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.lineplot(data=data, x=data.index, y='Close', ax=ax)
    ax.set_title("√âvolution des prix de cl√¥ture")
    ax.set_xlabel("Temps")
    ax.set_ylabel("Prix de cl√¥ture")
    st.pyplot(fig)

# Section : Pr√©paration des donn√©es
elif menu == "Pr√©paration des donn√©es":
    st.header("‚öôÔ∏è Pr√©paration des donn√©es")

    st.write(


        """
        Dans cette section, nous d√©taillons les √©tapes de pr√©paration des donn√©es utilis√©es pour entra√Æner notre mod√®le de pr√©diction des signaux de trading Bitcoin.

        ### 1. Gestion des valeurs manquantes
        Les valeurs manquantes ont √©t√© identifi√©es et supprim√©es afin de garantir la qualit√© des donn√©es utilis√©es pour l'entra√Ænement du mod√®le.

        ### 2. Suppression des doublons
        Les lignes dupliqu√©es ont √©t√© supprim√©es pour √©viter de fausser les r√©sultats.

        ### 3. Suppression de colonnes inutiles
        Certaines colonnes redondantes ont √©t√© retir√©es, notamment la colonne `column_to_remove`, pour garder uniquement les donn√©es pertinentes pour notre mod√®le.

        ### 4. Cr√©ation de nouvelles caract√©ristiques
        - **Moyenne mobile du volume** : La moyenne mobile sur 7 jours du volume √©chang√© a √©t√© calcul√©e.
        - **Identification des pics de volume** : Les p√©riodes o√π le volume √©chang√© d√©passe deux fois la moyenne mobile ont √©t√© √©tiquet√©es comme des "pics de volume".
        - **Direction du prix** : Une nouvelle caract√©ristique a √©t√© cr√©√©e pour capturer la direction du prix (hausse ou baisse).

        ### 5. Cr√©ation des signaux de trading
        Les donn√©es ont √©t√© √©tiquet√©es en fonction des conditions de march√© :
        - Signal d'achat (1) si un pic de volume se produit et que le prix augmente.
        - Signal de vente (0) si un pic de volume se produit et que le prix baisse.

        ### 6. S√©paration des donn√©es
        Les donn√©es ont √©t√© divis√©es en ensembles d‚Äôentra√Ænement (80%) et de test (20%) pour √©valuer la performance du mod√®le.

        ### 7. Normalisation des caract√©ristiques
        Toutes les caract√©ristiques d'entr√©e ont √©t√© normalis√©es pour garantir des performances optimales du mod√®le.

        Ces √©tapes sont essentielles pour pr√©parer les donn√©es de mani√®re appropri√©e avant de les utiliser dans le mod√®le de pr√©diction.
        """
    )


# Section : Visualisation des donn√©es
elif menu == "Visualisation des donn√©es":
    st.header("üîç Visualisation des donn√©es", anchor="visualisation")
    st.write("Voici un aper√ßu des donn√©es utilis√©es pour pr√©dire les signaux de trading Bitcoin :")

    # Aper√ßu des donn√©es
    st.dataframe(data.head())  # Afficher un √©chantillon des donn√©es

    # Visualisation de la distribution des signaux
    st.subheader("üìä Distribution des classes de signal (Achat vs Vente)")
    st.write("Cette visualisation montre la r√©partition des signaux d'achat (1) et de vente (0) dans le dataset.")
    fig, ax = plt.subplots()
    sns.countplot(x='Signal', data=data, palette={'0': 'red', '1': 'green'}, ax=ax)
    ax.set_title('Distribution des classes de Signal', fontsize=14, color='blue')
    ax.set_xlabel('Signal (0 = Vente, 1 = Achat)', fontsize=12)
    ax.set_ylabel('Nombre d\'observations', fontsize=12)
    st.pyplot(fig)

    # Visualisation de la matrice de corr√©lation
    st.subheader("üìà Matrice de corr√©lation")
    st.write("Cette matrice de corr√©lation montre les relations entre les diff√©rentes variables du dataset.")
    fig, ax = plt.subplots()
    sns.heatmap(data.corr(), annot=True, fmt='.2f', cmap='coolwarm', ax=ax)
    ax.set_title('Matrice de Corr√©lation des Variables', fontsize=14, color='blue')
    st.pyplot(fig)

    # Visualisation de la distribution des prix de cl√¥ture
    st.subheader("üìâ Distribution des prix de cl√¥ture")
    st.write("Cette visualisation montre la distribution des prix de cl√¥ture, avec la moyenne et la m√©diane indiqu√©es.")
    fig, ax = plt.subplots(figsize=(8, 6))
    sns.histplot(data_filtered['Close'], bins=30, kde=True, color='blue', ax=ax)
    mean_close = data_filtered['Close'].mean()
    median_close = data_filtered['Close'].median()
    ax.axvline(mean_close, color='green', linestyle='--', label=f'Moyenne: {mean_close:.2f}')
    ax.axvline(median_close, color='red', linestyle='--', label=f'M√©diane: {median_close:.2f}')
    ax.set_title('Distribution des prix de cl√¥ture', fontsize=14, color='blue')
    ax.set_xlabel('Prix de cl√¥ture', fontsize=12)
    ax.set_ylabel('Fr√©quence', fontsize=12)
    ax.legend()
    st.pyplot(fig)

    # Visualisation de l'√©volution des prix de cl√¥ture au fil du temps
    st.subheader("üìà √âvolution des prix de cl√¥ture au fil du temps")
    st.write("Cette visualisation montre l'√©volution des prix de cl√¥ture du Bitcoin au fil du temps.")
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.plot(data['Timestamp'], data['Close'], label='Prix de cl√¥ture', color='green')
    ax.set_title('√âvolution des prix de cl√¥ture', fontsize=14, color='blue')
    ax.set_xlabel('Temps', fontsize=12)
    ax.set_ylabel('Prix de cl√¥ture', fontsize=12)
    ax.legend()
    plt.xticks(rotation=45)
    st.pyplot(fig)

    # Visualisation de l'√©volution du volume √©chang√© en BTC
    st.subheader("üìä √âvolution du volume √©chang√© en BTC")
    st.write("Cette visualisation montre l'√©volution du volume √©chang√© en Bitcoin au fil du temps.")
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(data_filtered['Timestamp'], data_filtered['Volume_(BTC)'], label='Volume √©chang√© (BTC)', color='purple')
    ax.set_title('√âvolution du volume √©chang√© en BTC au fil du temps', fontsize=14, color='blue')
    ax.set_xlabel('Temps', fontsize=12)
    ax.set_ylabel('Volume √©chang√© (BTC)', fontsize=12)
    ax.legend()
    plt.xticks(rotation=45)
    st.pyplot(fig)

    # Visualisation des signaux de trading en fonction des pics de volume
    st.subheader("üìà Signaux d'achat et de vente bas√©s sur les pics de volume")
    st.write("Cette visualisation montre les signaux d'achat (‚ñ≤) et de vente (‚ñº) en fonction des pics de volume.")
    fig, ax = plt.subplots(figsize=(12, 8))
    ax.plot(data_filtered['Timestamp'], data_filtered['Close'], label='Prix de cl√¥ture', color='green')
    ax.scatter(data_filtered[data_filtered['Signal'] == 1]['Timestamp'], data_filtered[data_filtered['Signal'] == 1]['Close'],
               color='blue', label='Signal d\'achat', marker='^')
    ax.scatter(data_filtered[data_filtered['Signal'] == 0]['Timestamp'], data_filtered[data_filtered['Signal'] == 0]['Close'],
               color='red', label='Signal de vente', marker='v')
    ax.set_title('Signaux d\'achat et de vente', fontsize=14, color='blue')
    ax.set_xlabel('Temps', fontsize=12)
    ax.set_ylabel('Prix de cl√¥ture', fontsize=12)
    ax.legend()
    plt.xticks(rotation=45)
    st.pyplot(fig)


# D√©finir la liste des mod√®les
models = ['Random_Forest', 'SVM', 'Logistic_Regression', 'KNN', 'MLPClassifier']

# Section : Mod√©lisation et √âvaluation
st.header("üìà Mod√©lisation et √âvaluation")
st.write("Entrez les caract√©ristiques pour pr√©dire un signal de trading.")

# Charger les r√©sultats des mod√®les individuels
results_df = pd.read_csv('model_evaluation_results.csv')
st.subheader("R√©sultats des mod√®les")
st.dataframe(results_df)

# S√©lection dynamique du mod√®le
model_choice = st.selectbox("Choisir un mod√®le pour afficher les r√©sultats d√©taill√©s:", models)

# Afficher les r√©sultats d√©taill√©s pour le mod√®le s√©lectionn√©
st.subheader(f"R√©sultats d√©taill√©s pour {model_choice.replace('_', ' ')}")

# Afficher les r√©sultats d'√©valuation
st.write("R√©sultats d'√©valuation :")
model_results = results_df.loc[results_df['Model'] == model_choice.replace('_', ' ')]
st.write(f"- **Accuracy** : {model_results['Accuracy'].values[0]:.4f}")
st.write(f"- **Pr√©cision** : {model_results['Precision'].values[0]:.4f}")
st.write(f"- **Rappel** : {model_results['Recall'].values[0]:.4f}")
st.write(f"- **F1-score** : {model_results['F1 Score'].values[0]:.4f}")

# Charger et afficher la matrice de confusion
st.write("Matrice de confusion :")
try:
    conf_matrix = Image.open(f'confusion_matrix_{model_choice}.png')  # Charger l'image
    st.image(conf_matrix, caption=f'Matrice de confusion - {model_choice.replace("_", " ")}')  # Afficher l'image
except FileNotFoundError:
    st.error(f"Fichier 'confusion_matrix_{model_choice}.png' introuvable.")

# Charger et afficher la courbe ROC
st.write("Courbe ROC :")
try:
    roc_curve_img = Image.open(f'roc_curve_{model_choice}.png')  # Charger l'image
    st.image(roc_curve_img, caption=f'Courbe ROC - {model_choice.replace("_", " ")}')  # Afficher l'image
except FileNotFoundError:
    st.error(f"Fichier 'roc_curve_{model_choice}.png' introuvable.")

# Charger les r√©sultats de comparaison des mod√®les
comparison_df = pd.read_csv('model_comparison_results.csv')
st.subheader("Comparaison des Performances des Mod√®les")
st.dataframe(comparison_df)

# Carte thermique des performances
st.subheader("Carte Thermique des Performances")
fig, ax = plt.subplots(figsize=(10, 6))
sns.heatmap(comparison_df.set_index('Model'), annot=True, cmap='YlGnBu', fmt='.3f', ax=ax)
st.pyplot(fig)

# Diagramme en barres des performances
st.subheader("Diagramme en Barres des Performances")
fig, ax = plt.subplots(figsize=(10, 6))
comparison_df.set_index('Model').plot(kind='bar', ax=ax, color=['blue', 'green', 'red', 'purple'])
ax.set_title('Comparaison des Performances des Mod√®les')
ax.set_ylabel('Score')
ax.set_xlabel('Mod√®les')
ax.set_xticklabels(ax.get_xticklabels(), rotation=45)
st.pyplot(fig)


    # Expliquer le choix du mod√®le Random Forest
st.subheader("Mod√®le choisi : Random Forest")
st.write(
        """
        Le mod√®le **Random Forest** a √©t√© choisi comme mod√®le final en raison de ses performances sup√©rieures par rapport aux autres mod√®les test√©s.

        ### Pourquoi Random Forest ?
        - **Meilleur compromis entre pr√©cision et rappel** : Random Forest a un F1-score plus √©lev√© que les autres mod√®les.
        - **Robustesse** : Random Forest g√®re bien les donn√©es d√©s√©quilibr√©es et est moins sensible au surajustement (overfitting).
        - **Interpr√©tabilit√©** : Les arbres de d√©cision sous-jacents permettent de comprendre les d√©cisions du mod√®le.

        ### Performances de Random Forest :
        """
    )
    # Afficher les performances de Random Forest
st.write("**R√©sultats de Random Forest :**")
st.write(f"- **Accuracy** : {results['Random Forest']['Accuracy']:.4f}")
st.write(f"- **Pr√©cision** : {results['Random Forest']['Precision']:.4f}")
st.write(f"- **Rappel** : {results['Random Forest']['Recall']:.4f}")
st.write(f"- **F1-score** : {results['Random Forest']['F1 Score']:.4f}")

      # Entr√©e utilisateur
st.subheader("Pr√©diction du signal de trading")
avg_7_days = st.number_input("Moyenne mobile sur 7 jours", value=0.0, step=0.01)
avg_30_days = st.number_input("Moyenne mobile sur 30 jours", value=0.0, step=0.01)

open_price = st.number_input("Prix d'ouverture (Open)", value=0.0, step=0.01)
high_price = st.number_input("Prix le plus haut (High)", value=0.0, step=0.01)
low_price = st.number_input("Prix le plus bas (Low)", value=0.0, step=0.01)
close_price = st.number_input("Prix de cl√¥ture (Close)", value=0.0, step=0.01)

# Bouton de pr√©diction
if st.button("Pr√©dire"):
    try:
        # V√©rifier si le mod√®le est disponible
        if model:
            # Cr√©er une DataFrame avec les donn√©es saisies par l'utilisateur
            input_data = pd.DataFrame({
                '7_day_avg': [avg_7_days],
                '30_day_avg': [avg_30_days],
                'Open': [open_price],
                'High': [high_price],
                'Low': [low_price],
                'Close': [close_price]
            })

          # Effectuer la pr√©diction
            prediction = model.predict(input_data)

            # Traduire la pr√©diction en signal
            signal = "Acheter ‚úÖ" if prediction[0] == 1 else "Vendre ‚ùå"

            # Afficher le r√©sultat
            st.success(f"### Signal pr√©dit : {signal}")
        else:
            st.error("Mod√®le non charg√©. Veuillez v√©rifier le chargement du mod√®le.")
    except Exception as e:
        st.error(f"Erreur lors de la pr√©diction : {e}")
